{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"rt-retention \u00b6 rt-retention is a simple JFrog CLI plugin to facilitate enforcing retention policies in Artifactory. How it works \u00b6 rt-retention deletes artifacts matching FileSpecs in a given directory. It also has templating capabilities to help maintain similar retention policies. To set up your retention policies, define them as FileSpecs (or templates thereof). To enforce them, set up a humble cron job running the plugin. Installing rt-retention \u00b6 docker \u00b6 docker pull verifa/rt-retention manual \u00b6 Download the latest version from the Releases page Place its contents in your ~/.jfrog/plugins directory (If there\u2019s no plugins directory under .jfrog , create it) Running rt-retention \u00b6 commands \u00b6 run \u00b6 Usage: jf rt-retention run [command options] <filespecs-path> Arguments: filespecs-path (Path to the FileSpecs file/dir) Options: --dry-run do not delete artifacts [Default: true ] --recursive recursively find FileSpecs files in the given dir [Default: false] expand \u00b6 Usage: jf rt-retention expand [command options] <config-path> <templates-path> <output-path> Arguments: config-path (Path to the JSON config file) output-path (Path to output the generated FileSpecs) running with verbose output \u00b6 For verbose output to aid in debugging, set JFROG_CLI_LOG_LEVEL=DEBUG . Templating \u00b6 The expand command can generate FileSpecs from Go templates, populated with values from a JSON config file. The JSON config file may contain one or more policy definitions. Each specifies the template file it uses, as well as a list of entries. The template file path should be relative to the config file. Each entry will result in a FileSpecs file being generated. Example config.json : { \"my-junk-repositories\" : { \"template\" : \"templates/entire-repo.json\" , \"entries\" : [ { \"Repo\" : \"scratch-local\" } ] }, \"my-dev-repositories\" : { \"template\" : \"templates/older-than.json\" , \"entries\" : [ { \"Repo\" : \"generic-dev-local\" , \"Time\" : \"3w\" }, { \"Repo\" : \"libs-snapshot-local\" , \"Time\" : \"1y\" } ] } } The templates themselves are Go text templates . Properties from the JSON config entry will be used to populate the template. Example templates/delete-older-than.json : { \"files\" : [ { \"aql\" : { \"items.find\" : { \"repo\" : \"{{.Repo}}\" , \"created\" : { \"$before\" : \"{{.Time}}\" } } } } ] } Pass the config file, the templates directory and the output directory to the expand command to generate the retention policies. $ jf rt-retention expand config.json templates/ policies/ [ \ud83d\udd35Info ] Reading config file [ \ud83d\udd35Info ] Parsing config JSON [ \ud83d\udd35Info ] Expanding policies [ \ud83d\udd35Info ] [ my-junk-repositories ] [ \ud83d\udd35Info ] [ my-dev-repositories ] [ \ud83d\udd35Info ] Done Extra templating properties \u00b6 deleteParent \u00b6 Policies can set deleteParent to delete the parent paths of what the FileSpecs would match, rather than the matches themselves. This is useful for deleting entire directories if they contain an artifact matching certain conditions, or deleting Docker images based on conditions on their manifest file. { \"template-one\" : { \"template\" : \"templates/template.json\" , \"deleteParent\" : true , \"entries\" : [ { \"Repo\" : \"scratch-local\" } ] } } nameProperty \u00b6 Policies can optionally set a nameProperty , which can be used to change the generated FileSpecs' filename to the value of the given property key. Without it, FileSpecs are generated using the name of the template, and the index of their entry. The below example uses the Repo property value to use as the FileSpecs' filename. { \"template-one\" : { \"template\" : \"templates/template.json\" , \"nameProperty\" : \"Repo\" , \"entries\" : [ { \"Repo\" : \"scratch-local\" }, { \"Repo\" : \"dev-local\" } ] } } Expanding the templates will result in the following generated files: output/ `- template-one/ |- scratch-local-0.json `- dev-local-0.json","title":"rt-retention"},{"location":"#rt-retention","text":"rt-retention is a simple JFrog CLI plugin to facilitate enforcing retention policies in Artifactory.","title":"rt-retention"},{"location":"#how-it-works","text":"rt-retention deletes artifacts matching FileSpecs in a given directory. It also has templating capabilities to help maintain similar retention policies. To set up your retention policies, define them as FileSpecs (or templates thereof). To enforce them, set up a humble cron job running the plugin.","title":"How it works"},{"location":"#installing-rt-retention","text":"","title":"Installing rt-retention"},{"location":"#docker","text":"docker pull verifa/rt-retention","title":"docker"},{"location":"#manual","text":"Download the latest version from the Releases page Place its contents in your ~/.jfrog/plugins directory (If there\u2019s no plugins directory under .jfrog , create it)","title":"manual"},{"location":"#running-rt-retention","text":"","title":"Running rt-retention"},{"location":"#commands","text":"","title":"commands"},{"location":"#run","text":"Usage: jf rt-retention run [command options] <filespecs-path> Arguments: filespecs-path (Path to the FileSpecs file/dir) Options: --dry-run do not delete artifacts [Default: true ] --recursive recursively find FileSpecs files in the given dir [Default: false]","title":"run"},{"location":"#expand","text":"Usage: jf rt-retention expand [command options] <config-path> <templates-path> <output-path> Arguments: config-path (Path to the JSON config file) output-path (Path to output the generated FileSpecs)","title":"expand"},{"location":"#running-with-verbose-output","text":"For verbose output to aid in debugging, set JFROG_CLI_LOG_LEVEL=DEBUG .","title":"running with verbose output"},{"location":"#templating","text":"The expand command can generate FileSpecs from Go templates, populated with values from a JSON config file. The JSON config file may contain one or more policy definitions. Each specifies the template file it uses, as well as a list of entries. The template file path should be relative to the config file. Each entry will result in a FileSpecs file being generated. Example config.json : { \"my-junk-repositories\" : { \"template\" : \"templates/entire-repo.json\" , \"entries\" : [ { \"Repo\" : \"scratch-local\" } ] }, \"my-dev-repositories\" : { \"template\" : \"templates/older-than.json\" , \"entries\" : [ { \"Repo\" : \"generic-dev-local\" , \"Time\" : \"3w\" }, { \"Repo\" : \"libs-snapshot-local\" , \"Time\" : \"1y\" } ] } } The templates themselves are Go text templates . Properties from the JSON config entry will be used to populate the template. Example templates/delete-older-than.json : { \"files\" : [ { \"aql\" : { \"items.find\" : { \"repo\" : \"{{.Repo}}\" , \"created\" : { \"$before\" : \"{{.Time}}\" } } } } ] } Pass the config file, the templates directory and the output directory to the expand command to generate the retention policies. $ jf rt-retention expand config.json templates/ policies/ [ \ud83d\udd35Info ] Reading config file [ \ud83d\udd35Info ] Parsing config JSON [ \ud83d\udd35Info ] Expanding policies [ \ud83d\udd35Info ] [ my-junk-repositories ] [ \ud83d\udd35Info ] [ my-dev-repositories ] [ \ud83d\udd35Info ] Done","title":"Templating"},{"location":"#extra-templating-properties","text":"","title":"Extra templating properties"},{"location":"#deleteparent","text":"Policies can set deleteParent to delete the parent paths of what the FileSpecs would match, rather than the matches themselves. This is useful for deleting entire directories if they contain an artifact matching certain conditions, or deleting Docker images based on conditions on their manifest file. { \"template-one\" : { \"template\" : \"templates/template.json\" , \"deleteParent\" : true , \"entries\" : [ { \"Repo\" : \"scratch-local\" } ] } }","title":"deleteParent"},{"location":"#nameproperty","text":"Policies can optionally set a nameProperty , which can be used to change the generated FileSpecs' filename to the value of the given property key. Without it, FileSpecs are generated using the name of the template, and the index of their entry. The below example uses the Repo property value to use as the FileSpecs' filename. { \"template-one\" : { \"template\" : \"templates/template.json\" , \"nameProperty\" : \"Repo\" , \"entries\" : [ { \"Repo\" : \"scratch-local\" }, { \"Repo\" : \"dev-local\" } ] } } Expanding the templates will result in the following generated files: output/ `- template-one/ |- scratch-local-0.json `- dev-local-0.json","title":"nameProperty"}]}